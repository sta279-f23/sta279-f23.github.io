f1(5, groups = c(1, 1, 2))
blah <- c(1, 2, 3)
blah[c(T, F)]
drwho_episodes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-11-28/drwho_episodes.csv')
drwho_directors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-11-28/drwho_directors.csv')
drwho_writers <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-11-28/drwho_writers.csv')
View(drwho_episodes)
unique(drwho_episodes$era)
View(drwho_directors)
View(drwho_writers)
library(gee)
?gee
m <- 30
n_i <- 10
n <- m*n_i
groups <- rep(1:30, each=n_i)
sigma_u <- 0.5
sigma_e <- 0.5
u <- rnorm(m, sd=sigma_u)
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
y <- 1 + u[groups] + 0*x1 + 0*x2 + rnorm(n, sd=sigma_e)
y <- 1 + u[groups] + 0.5*x1 + 1*x2 + rnorm(n, sd=sigma_e)
m1 <- gee(y ~ x1 + x1, corstr = "exchangeable")
m1 <- gee(y ~ x1 + x1, id = groups, corstr = "exchangeable")
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "exchangeable")
m1$naive.variance
m1$robust.variance
library(sandwich)
sandwich(m1)
sqrt(m1$robust.variance[2,2])
summary(m1)
summary(m1)$coefficients
sqrt(m1$robust.variance[2,2])
sqrt(m1$naive.variance[2,2])
vcov(m1)
vcov(m1)
lm(y~ x1 + x2) |> summary()
summary(m1)$coefficients
summary(m1)$coefficients[2,5]
2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
pvals_gee <- rep(NA, 100)
for(i in 1:100){
u <- rnorm(m, sd=sigma_u)
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
y <- 1 + u[groups] + 0*x1 + 1*x2 + rnorm(n, sd=sigma_e)
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "exchangeable")
pvals_gee[i] <- 2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
}
hist(pvals_gee)
mean(pvals_gee < 0.05)
m <- 10
n_i <- 10
n <- m*n_i
groups <- rep(1:m, each=n_i)
sigma_u <- 0.5
sigma_e <- 0.5
nsim <- 500
pvals_gee <- rep(NA, nsim)
for(i in 1:nsim){
u <- rnorm(m, sd=sigma_u)
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
y <- 1 + u[groups] + 0*x1 + 1*x2 + rnorm(n, sd=sigma_e)
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "exchangeable")
pvals_gee[i] <- 2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
print(i)
}
mean(pvals_gee < 0.05)
m <- 10
n_i <- 100
n <- m*n_i
groups <- rep(1:m, each=n_i)
sigma_u <- 0.5
sigma_e <- 0.5
nsim <- 500
pvals_gee <- rep(NA, nsim)
for(i in 1:nsim){
u <- rnorm(m, sd=sigma_u)
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
y <- 1 + u[groups] + 0*x1 + 1*x2 + rnorm(n, sd=sigma_e)
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "exchangeable")
pvals_gee[i] <- 2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
print(i)
}
mean(pvals_gee < 0.05)
m <- 50
n_i <- 10
n <- m*n_i
groups <- rep(1:m, each=n_i)
sigma_u <- 0.5
sigma_e <- 0.5
nsim <- 500
pvals_gee <- rep(NA, nsim)
for(i in 1:nsim){
u <- rnorm(m, sd=sigma_u)
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
y <- 1 + u[groups] + 0*x1 + 1*x2 + rnorm(n, sd=sigma_e)
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "exchangeable")
pvals_gee[i] <- 2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
print(i)
}
mean(pvals_gee < 0.05)
library(rvest)
read_html("https://www.imdb.com/title/tt0436992/episodes/?season=1") |>
html_elements("span")
read_html("https://www.imdb.com/title/tt0436992/episodes/?season=1") |>
html_elements("span[aria-label^='IMDb']")
read_html("https://www.imdb.com/title/tt0436992/episodes/?season=1") |>
html_elements("span[aria-label^='IMDb']") |>
html_text2()
urls <- paste0("https://www.imdb.com/title/tt0436992/episodes/?season=", 1:13)
urls
read_html("https://www.imdb.com/title/tt0436992/episodes/?season=1") |>
html_elements("span[aria-label^='IMDb']") |>
html_text2()
season_ratings <- read_html("https://www.imdb.com/title/tt0436992/episodes/?season=1") |>
html_elements("span[aria-label^='IMDb']") |>
html_text2()
season_ratings |>
str_extract("\\d+/")
season_ratings |>
str_extract("[\\d\.]+(?=/)")
season_ratings |>
str_extract("[\\d\\.]+(?=/)")
season_ratings |>
str_extract("[\\d\\.]+(?=/)") |>
as.numeric()
ratings <- c()
for(i in 1:13){
season_ratings <- read_html(urls[i]) |>
html_elements("span[aria-label^='IMDb']") |>
html_text2() |>
str_extract("[\\d\\.]+(?=/)") |>
as.numeric()
ratings <- c(ratings, season_ratings)
}
ratings
length(ratings)
nrow(drwho_episodes)
i <- 1
season_ratings <- read_html(urls[i]) |>
html_elements("span[aria-label^='IMDb']") |>
html_text2() |>
str_extract("[\\d\\.]+(?=/)") |>
as.numeric()
length(season_ratings)
install.packages("datardis")
library(datardis)
?datardis
?drwho_episodes
ratings <- c()
season <- c()
for(i in 1:13){
season_ratings <- read_html(urls[i]) |>
html_elements("span[aria-label^='IMDb']") |>
html_text2() |>
str_extract("[\\d\\.]+(?=/)") |>
as.numeric()
ratings <- c(ratings, season_ratings)
season <- c(season, rep(i, length(season_ratings)))
}
m1$scale
m1$working.correlation
m1$fitted.values
sum((y - m1$fitted.values))^2
sum((y - m1$fitted.values)^2)
mean((y - m1$fitted.values)^2)
m1$scale
sum((y - m1$fitted.values)^2)/(m*(n_i - 1))
sum((y - m1$fitted.values)^2)/(m*n_i - 1)
sum((y - m1$fitted.values)^2)/(m*n_i - 2)
sum((y - m1$fitted.values)^2)/(m*n_i - 3)
m1$working.correlation
resids %*% t(resids)
resids <- y - m1$fitted.values
sum(resids^2)/(m*n_i - 3)
resids %*% t(resids)
c_mat <- matrix(0, n_i, n_i)
for(i in 1:m){
c_mat <- c_mat + resids[((i - 1)*n_i + 1):(i*n_i)] %*% t(resids[((i - 1)*n_i + 1):(i*n_i)])
}
c_mat
sum(diag(c_mat))
sum(diag(c_mat))/(m*n_i - 3)
(sum(c_mat) - sum(diag(c_mat)))
(sum(c_mat) - sum(diag(c_mat)))/(m*n_i*(n_i - 1))
m1$working.correlation
0.5092443*m1$scale
(sum(c_mat) - sum(diag(c_mat)))/(m*n_i*(n_i - 1))
(sum(c_mat))/(m*n_i*(n_i - 1))
(sum(c_mat) - sum(diag(c_mat)))/(m*n_i*(n_i - 1))
(sum(c_mat) - sum(diag(c_mat)))/(n*(n-1))
(sum(c_mat) - sum(diag(c_mat)))/(m*n_i*(n_i - 1))
V_i <- m1$scale*m1$working.correlation
V_i
Rcpp::cppFunction('NumericMatrix matrix_sumC(NumericMatrix A, NumericMatrix B){
int nrow = A.rows();
int ncol = A.cols();
NumericMatrix C(nrow, ncol);
for(int i = 0; i < nrow; ++i){
for(int j = 0; j < ncol; ++j){
C(i,j) = A(i,j) + B(i,j);
}
}
return C;
}')
a <- matrix(1:6, nrow=2)
b <- matrix(5:10, nrow=2)
a + b
matrix_sumC(a, b)
Rcpp::cppFunction('NumericMatrix matrix_transposeC(NumericMatrix A){
int nrow = A.rows();
int ncol = A.cols();
NumericMatrix A_t(ncol, nrow);
for(int i = 0; i < nrow; ++i){
for(int j = 0; j < ncol; ++j){
A_t(j,i) = A(i,j);
}
}
return A_t;
}')
a <- matrix(1:6, nrow=2)
t(a)
matrix_transposeC(a)
a <- matrix(rnorm(1000), nrow = 25)
bench::mark(
t(a),
matrix_transposeC(a)
)
Rcpp::cppFunction('double matrix_traceC(NumericMatrix A){
int nrow = A.rows();
double trace = 0;
for(int i = 0; i < nrow; ++i){
trace += A(i,i);
}
return trace;
}')
a <- matrix(1:9, nrow=3)
sum(diag(a))
matrix_traceC(a)
A <- matrix(0, 3, 3)
for(i in 1:m){
X_i <- cbind(1, x1[groups == i], x2[groups == i])
A <- A + t(X_i) %*% solve(V_i) %*% X_i
}
A
A/m
solve(A)
m1$naive.variance
B <- matrix(0, 3, 3)
for(i in 1:m){
X_i <- cbind(1, x1[groups == i], x2[groups == i])
B <- B + t(X_i) %*% solve(V_i) %*% resids[groups == i] %*% t(resids[groups == i]) %*%
solve(V_i) %*% X_i
}
B
A
solve(A) %*% B %*% solve(A)
m1$robust.variance
m <- 50
n_i <- 10
n <- m*n_i
groups <- rep(1:m, each=n_i)
a <- matrix(runif(9, 0, 2))
V_true <- t(a) %*% a
V_true
a <- matrix(runif(9, 0, 2), nrow=3)
V_true <- t(a) %*% a
V_true
?MASS::mvrnorm
MASS::mvrnorm(1, rep(0, 3), V_true)
m <- 50
n_i <- 10
n <- m*n_i
groups <- rep(1:m, each=n_i)
a <- matrix(runif(9, 0, 2), nrow=3)
V_true <- t(a) %*% a
nsim <- 500
pvals_gee <- rep(NA, nsim)
for(j in 1:nsim){
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
beta <- c(1, 0, 1)
y <- rep(NA, n)
for(i in 1:m){
X_i <- cbind(1, x1[groups == i], x2[groups == i])
y[groups == i] <- X_i %*% beta + MASS::mvrnorm(1, rep(0, n_i), V_true)
}
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "exchangeable")
pvals_gee[i] <- 2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
print(j)
}
V_true
m <- 50
n_i <- 10
n <- m*n_i
groups <- rep(1:m, each=n_i)
a <- matrix(runif(9, 0, 2), nrow=3)
V_true <- t(a) %*% a
nsim <- 500
pvals_gee <- rep(NA, nsim)
for(j in 1:nsim){
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
beta <- c(1, 0, 1)
y <- rep(NA, n)
for(i in 1:m){
X_i <- cbind(1, x1[groups == i], x2[groups == i])
y[groups == i] <- X_i %*% beta + MASS::mvrnorm(1, rep(0, 3), V_true)
}
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "exchangeable")
pvals_gee[i] <- 2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
print(j)
}
mean(pvals_gee < 0.05)
pvals_gee
m1
m1$coefficients
summary(m1)$coefficients
m <- 50
n_i <- 10
n <- m*n_i
groups <- rep(1:m, each=n_i)
a <- matrix(runif(9, 0, 2), nrow=3)
V_true <- t(a) %*% a
nsim <- 500
pvals_gee <- rep(NA, nsim)
for(j in 1:nsim){
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
beta <- c(1, 0, 1)
y <- rep(NA, n)
for(i in 1:m){
X_i <- cbind(1, x1[groups == i], x2[groups == i])
y[groups == i] <- X_i %*% beta + MASS::mvrnorm(1, rep(0, 3), V_true)
}
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "exchangeable")
pvals_gee[j] <- 2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
print(j)
}
mean(pvals_gee < 0.05)
m2 <- lmer(y ~ x1 + x2 + (1|groups))
summary(m1)
m1$coefficients
summary(m2)
summary(m1)$coefficients
summary(m2)
summary(m2)$coefficients
summary(m2)$coefficients[2,5]
m <- 50
n_i <- 10
n <- m*n_i
groups <- rep(1:m, each=n_i)
a <- matrix(runif(9, 0, 2), nrow=3)
V_true <- t(a) %*% a
nsim <- 500
pvals_gee <- rep(NA, nsim)
pvals_mm <- rep(NA, nsim)
for(j in 1:nsim){
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
beta <- c(1, 0, 1)
y <- rep(NA, n)
for(i in 1:m){
X_i <- cbind(1, x1[groups == i], x2[groups == i])
y[groups == i] <- X_i %*% beta + MASS::mvrnorm(1, rep(0, 3), V_true)
}
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "exchangeable")
pvals_gee[j] <- 2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
m2 <- lmer(y ~ x1 + x2 + (1|groups))
pvals_mm[j] <- summary(m2)$coefficients[2,5]
print(j)
}
mean(pvals_gee < 0.05)
mean(pvals_mm < 0.05)
pvals_gee
pvals_mm
plot(pvals_gee, pvals_mm)
a <- matrix(runif(9, 0, 10), nrow=3)
V_true <- t(a) %*% a
V_true
m <- 50
n_i <- 10
n <- m*n_i
groups <- rep(1:m, each=n_i)
a <- matrix(runif(9, 0, 10), nrow=3)
V_true <- t(a) %*% a
nsim <- 500
pvals_gee <- rep(NA, nsim)
pvals_mm <- rep(NA, nsim)
for(j in 1:nsim){
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
beta <- c(1, 0, 1)
y <- rep(NA, n)
for(i in 1:m){
X_i <- cbind(1, x1[groups == i], x2[groups == i])
y[groups == i] <- X_i %*% beta + MASS::mvrnorm(1, rep(0, 3), V_true)
}
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "exchangeable")
pvals_gee[j] <- 2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
m2 <- lmer(y ~ x1 + x2 + (1|groups))
pvals_mm[j] <- summary(m2)$coefficients[2,5]
print(j)
}
mean(pvals_gee < 0.05)
mean(pvals_mm < 0.05)
m <- 50
n_i <- 10
n <- m*n_i
groups <- rep(1:m, each=n_i)
a <- matrix(runif(9, 0, 1), nrow=3)
V_true <- t(a) %*% a
V_true
m1$scale
m1$working.correlation
set.seed(279)
n <- 100
x1 <- runif(n)
x2 <- rnorm(n)
y <- rnorm(n, 1 + x1 + x2, 2)
# create the design matrix
X <- cbind(1, x1, x2)
#βˆ=(X^T*X)^(−1)X^T *Y
#linearReg <- function(x, y, max_itr=50)
#{
family <- "gaussian"
model <- lm(y~X)
Xtranpose <- t(X)
#beta
Beta <- solve(Xtranpose %*% X) %*% Xtranpose %*% y
#YHat
Yhat <- X%*%Beta
#RSS
residualSq <- (y-Yhat)^2
RSS <- sum(residualSq)
MSE <- (1/(length(y)-(len(X)/100)))*RSS
set.seed(279)
n <- 100
x1 <- runif(n)
x2 <- rnorm(n)
y <- rnorm(n, 1 + x1 + x2, 2)
# create the design matrix
X <- cbind(1, x1, x2)
#βˆ=(X^T*X)^(−1)X^T *Y
#linearReg <- function(x, y, max_itr=50)
#{
family <- "gaussian"
model <- lm(y~X)
Xtranpose <- t(X)
#beta
Beta <- solve(Xtranpose %*% X) %*% Xtranpose %*% y
#YHat
Yhat <- X%*%Beta
#RSS
residualSq <- (y-Yhat)^2
RSS <- sum(residualSq)
MSE <- (1/(length(y)-ncol(X)))*RSS
#se
standardError <- sqrt(diag(MSE*solve(Xtranpose%*%X)))
standardError
m <- 10
n_i <- 10
n <- m*n_i
groups <- rep(1:m, each=n_i)
sigma_u <- 0.5
sigma_e <- 0.5
nsim <- 500
pvals_gee <- rep(NA, nsim)
for(i in 1:nsim){
u <- rnorm(m, sd=sigma_u)
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
y <- 1 + u[groups] + 0*x1 + 1*x2 + rnorm(n, sd=sigma_e)
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "exchangeable")
pvals_gee[i] <- 2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
print(i)
}
mean(pvals_gee < 0.05)
?gee
m <- 10
n_i <- 10
n <- m*n_i
groups <- rep(1:m, each=n_i)
sigma_u <- 0.5
sigma_e <- 0.5
nsim <- 500
pvals_gee <- rep(NA, nsim)
for(i in 1:nsim){
u <- rnorm(m, sd=sigma_u)
x1 <- rnorm(n)
x2 <- rnorm(m)[groups]
y <- 1 + u[groups] + 0*x1 + 1*x2 + rnorm(n, sd=sigma_e)
m1 <- gee(y ~ x1 + x2, id = groups, corstr = "unstructured")
pvals_gee[i] <- 2*pnorm(abs(summary(m1)$coefficients[2,5]), lower.tail=F)
print(i)
}
mean(pvals_gee < 0.05)
list.files("~/Documents/Research/temple_eeg_data/*.edf", recursive = T)
list.files("~/Documents/Research/temple_eeg_data/", recursive = T)
?list.files
list.files("~/Documents/Research/temple_eeg_data/", ".edf", recursive = T)
length(list.files("~/Documents/Research/temple_eeg_data/", ".edf", recursive = T))
length(list.files("~/Documents/Research/temple_eeg_data/train", ".edf", recursive = T))
list.files("~/Documents/Research/temple_eeg_data/train/abnormal", ".edf", recursive = T)
list.files("~/Documents/Research/temple_eeg_data/train/normal", ".edf", recursive = T)
?pivot_longer
reticulate::repl_python()
