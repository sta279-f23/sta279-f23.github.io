---
title: "Lecture 13: Data wrangling"
format: 
  revealjs:
    theme: theme.scss
editor: source
execute: 
  echo: true
editor_options: 
  chunk_output_type: console
---

## So far

* `select`: choose certain columns
* `filter`: choose certain rows
* `summarize`: calculate summary statistics
* `group_by`: group rows together
* `mutate`: create new columns
* `count`: count the number of rows
* `arrange`: re-order the rows

## Do dogs help exam stress?

* Data collected on 284 students at a mid-size Canadian university
* Students randomly assigned to one of three treatment groups: handler-only contact, indirect contact, and direct contact
* Well-being and ill-being measures recorded before and after treatment for each student
* Approach: compare pre/post measures of well-being and ill-being

## Recording well-being and ill-being measures

* Likert items for each well-being / ill-being measure
* Average the likert items to get a score for each measure
* E.g.:
  - Positive affect score is the average of 5 Likert items
  - Social connectedness is the average of 20 Likert items
  
## Example Likert item for social connectedness

"I am able to relate to my peers."

* Strongly disagree (1)
* Disagree
* Somewhat disagree
* Somewhat agree
* Agree
* Strongly agree (6)

## The raw data

* 284 rows (one per student)
* 200+ columns

```{r, include=F}
library(tidyverse)
raw_data <- read.csv("https://raw.githubusercontent.com/ciaran-evans/dog-data-analysis/main/dog_data_raw.csv")
```

```{r}
raw_data |>
  select(starts_with("SC"))
```

## Our goal for today

* Calculate the pre- and post-treatment social connectedness scores for each participant
* **Question:** What do we want the final data to look like?

## Initial data processing

* Social connectedness is the average of 20 Likert items
* These items should take values between 1 and 6
* However:

```{r}
raw_data |>
  select(starts_with("SC")) |>
  max(na.rm=T)
```

## Handling errors

```{r, eval=F}
cleaned_data <- raw_data |>
  mutate(SC1_1 = ifelse(SC1_1 > 6, NA, SC1_1),
         SC1_2 = ifelse(SC1_2 > 6, NA, SC1_2),
         ...)
```

Are there any issues with this approach?

## `across`

```{r, include=F}
set.seed(3)
example_df <- data.frame(x1 = sample(1:6, 3, replace=T),
                         x2 = sample(1:9, 3, replace=T),
                         x3 = sample(1:9, 3, replace=T),
                         y1 = sample(1:6, 3, replace=T),
                         y2 = c(NA, sample(1:6, 2, replace=T)))
```

```{r}
example_df
```

```{r}
example_df |>
  summarize(across(c(x1, x2, x3, y1, y2), mean))
```

**Question:** What if I want to ignore NAs when computing the mean?

## `across`

```{r}
example_df
```

```{r}
example_df |>
  summarize(across(c(x1, x2, x3, y1, y2), 
                   function(x) {mean(x, na.rm=T)} ))
```

## `across`

```{r}
example_df
```

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {x + 1} ))
```

**Question:** What if I want to replace values > 6 with NA?

## `across`

```{r}
example_df
```

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} ))
```


## Handling errors

```{r, eval=F}
cleaned_data <- raw_data |>
  mutate(across(c(SC1_1, SC1_2, ... ), 
                function(x) {ifelse(x > 6, NA, x)}))
```

**Question:** Are there any issues with this approach?

## Handling errors

```{r}
cleaned_data <- raw_data |>
  mutate(across(starts_with("SC"), 
                function(x) {ifelse(x > 6, NA, x)}))

cleaned_data |>
  select(starts_with("SC")) |>
  max(na.rm=T)
```

## More data cleaning

* For some Social Connectedness items, "6" means "more connected"
  - e.g.: "I find myself actively involved in people's lives."
* For some Social Connectedness items, "6" means "less connected"
  - e.g.: "I feel like an outsider."
* We want higher scores to always mean "more connected"

We need to reverse the scores for some Social Connectedness items!

## More data cleaning

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} ))
```

Suppose we want to reverse the scores for `x1` and `x3`

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} )) |>
  select(num_range("x", c(1, 3)))
```

## More data cleaning

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} ))
```

Suppose we want to reverse the scores for `x1` and `x3`

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} ), 
         across(num_range("x", c(1, 3)), 
                function(x) {7 - x}))
```

## With the dog data

```{r}
cleaned_data <- raw_data |>
  mutate(across(starts_with("SC"), 
                function(x) {ifelse(x > 6, NA, x)}),
         across(num_range("SC1_", 
                          c(3, 6, 7, 9, 11, 13, 15, 17, 18, 20)), 
                function(x) {7 - x}),
         across(num_range("SC2_", 
                          c(3, 6, 7, 9, 11, 13, 15, 17, 18, 20)), 
                function(x) {7 - x}))
```


## Averaging columns

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)}), 
         across(num_range("x", c(1, 3)), 
                function(x) {7 - x}))
```

**Question:** What if I want to calculate the average of the `x` columns for each row?

## Averaging columns

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} ))
```


```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} ),
         x_mean = (x1 + x2 + x3)/3)
```

## Averaging columns

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} ))
```

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} ),
         x_mean = mean(c(x1, x2, x3), na.rm=T))
```

## Averaging columns

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} ))
```

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} )) |>
  rowwise() |>
  mutate(x_mean = mean(c(x1, x2, x3), na.rm=T))
```

## Averaging columns

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} ))
```

```{r}
example_df |>
  mutate(across(c(x1, x2, x3, y1, y2), 
                function(x) {ifelse(x > 6, NA, x)} )) |>
  rowwise() |>
  mutate(x_mean = mean(c_across(starts_with("x")), na.rm=T))
```

## With the dog data

```{r}
cleaned_data <- raw_data |>
  mutate(across(starts_with("SC"), 
                function(x) {ifelse(x > 6, NA, x)}),
         across(num_range("SC1_", 
                          c(3, 6, 7, 9, 11, 13, 15, 17, 18, 20)), 
                function(x) {7 - x}),
         across(num_range("SC2_", 
                          c(3, 6, 7, 9, 11, 13, 15, 17, 18, 20)), 
                function(x) {7 - x})) |>
  rowwise() |>
  mutate(sc_pre = mean(c_across(starts_with("SC1_")), na.rm=T),
         sc_post = mean(c_across(starts_with("SC2_")), na.rm=T))
```

```{r}
cleaned_data |>
  select(sc_pre, sc_post)
```


## Class activity

[https://sta279-f23.github.io/class_activities/ca_lecture_13.html](https://sta279-f23.github.io/class_activities/ca_lecture_13.html)

